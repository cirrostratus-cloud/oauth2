// Code generated by mockery v2.35.4. DO NOT EDIT.

package authorization

import (
	authorization "github.com/cirrostratus-cloud/oauth2/authorization"
	mock "github.com/stretchr/testify/mock"
)

// MockAuthorizationCodeRepository is an autogenerated mock type for the AuthorizationCodeRepository type
type MockAuthorizationCodeRepository struct {
	mock.Mock
}

type MockAuthorizationCodeRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthorizationCodeRepository) EXPECT() *MockAuthorizationCodeRepository_Expecter {
	return &MockAuthorizationCodeRepository_Expecter{mock: &_m.Mock}
}

// CreateAuthorizationCode provides a mock function with given fields: _a0
func (_m *MockAuthorizationCodeRepository) CreateAuthorizationCode(_a0 authorization.AuthorizationCode) (authorization.AuthorizationCode, error) {
	ret := _m.Called(_a0)

	var r0 authorization.AuthorizationCode
	var r1 error
	if rf, ok := ret.Get(0).(func(authorization.AuthorizationCode) (authorization.AuthorizationCode, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(authorization.AuthorizationCode) authorization.AuthorizationCode); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(authorization.AuthorizationCode)
	}

	if rf, ok := ret.Get(1).(func(authorization.AuthorizationCode) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthorizationCodeRepository_CreateAuthorizationCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAuthorizationCode'
type MockAuthorizationCodeRepository_CreateAuthorizationCode_Call struct {
	*mock.Call
}

// CreateAuthorizationCode is a helper method to define mock.On call
//   - _a0 authorization.AuthorizationCode
func (_e *MockAuthorizationCodeRepository_Expecter) CreateAuthorizationCode(_a0 interface{}) *MockAuthorizationCodeRepository_CreateAuthorizationCode_Call {
	return &MockAuthorizationCodeRepository_CreateAuthorizationCode_Call{Call: _e.mock.On("CreateAuthorizationCode", _a0)}
}

func (_c *MockAuthorizationCodeRepository_CreateAuthorizationCode_Call) Run(run func(_a0 authorization.AuthorizationCode)) *MockAuthorizationCodeRepository_CreateAuthorizationCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(authorization.AuthorizationCode))
	})
	return _c
}

func (_c *MockAuthorizationCodeRepository_CreateAuthorizationCode_Call) Return(_a0 authorization.AuthorizationCode, _a1 error) *MockAuthorizationCodeRepository_CreateAuthorizationCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthorizationCodeRepository_CreateAuthorizationCode_Call) RunAndReturn(run func(authorization.AuthorizationCode) (authorization.AuthorizationCode, error)) *MockAuthorizationCodeRepository_CreateAuthorizationCode_Call {
	_c.Call.Return(run)
	return _c
}

// FindAuthorizationCodeByCode provides a mock function with given fields: code
func (_m *MockAuthorizationCodeRepository) FindAuthorizationCodeByCode(code string) (authorization.AuthorizationCode, error) {
	ret := _m.Called(code)

	var r0 authorization.AuthorizationCode
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (authorization.AuthorizationCode, error)); ok {
		return rf(code)
	}
	if rf, ok := ret.Get(0).(func(string) authorization.AuthorizationCode); ok {
		r0 = rf(code)
	} else {
		r0 = ret.Get(0).(authorization.AuthorizationCode)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthorizationCodeRepository_FindAuthorizationCodeByCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAuthorizationCodeByCode'
type MockAuthorizationCodeRepository_FindAuthorizationCodeByCode_Call struct {
	*mock.Call
}

// FindAuthorizationCodeByCode is a helper method to define mock.On call
//   - code string
func (_e *MockAuthorizationCodeRepository_Expecter) FindAuthorizationCodeByCode(code interface{}) *MockAuthorizationCodeRepository_FindAuthorizationCodeByCode_Call {
	return &MockAuthorizationCodeRepository_FindAuthorizationCodeByCode_Call{Call: _e.mock.On("FindAuthorizationCodeByCode", code)}
}

func (_c *MockAuthorizationCodeRepository_FindAuthorizationCodeByCode_Call) Run(run func(code string)) *MockAuthorizationCodeRepository_FindAuthorizationCodeByCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAuthorizationCodeRepository_FindAuthorizationCodeByCode_Call) Return(_a0 authorization.AuthorizationCode, _a1 error) *MockAuthorizationCodeRepository_FindAuthorizationCodeByCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthorizationCodeRepository_FindAuthorizationCodeByCode_Call) RunAndReturn(run func(string) (authorization.AuthorizationCode, error)) *MockAuthorizationCodeRepository_FindAuthorizationCodeByCode_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthorizationCodeRepository creates a new instance of MockAuthorizationCodeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthorizationCodeRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthorizationCodeRepository {
	mock := &MockAuthorizationCodeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
