// Code generated by mockery v2.35.4. DO NOT EDIT.

package authorization

import (
	authorization "github.com/cirrostratus-cloud/oauth2/authorization"
	mock "github.com/stretchr/testify/mock"
)

// MockAuthorizationSessionRepository is an autogenerated mock type for the AuthorizationSessionRepository type
type MockAuthorizationSessionRepository struct {
	mock.Mock
}

type MockAuthorizationSessionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthorizationSessionRepository) EXPECT() *MockAuthorizationSessionRepository_Expecter {
	return &MockAuthorizationSessionRepository_Expecter{mock: &_m.Mock}
}

// CreateAuthorizationSession provides a mock function with given fields: auhtorizationSession
func (_m *MockAuthorizationSessionRepository) CreateAuthorizationSession(auhtorizationSession authorization.AuthorizationSession) (authorization.AuthorizationSession, error) {
	ret := _m.Called(auhtorizationSession)

	var r0 authorization.AuthorizationSession
	var r1 error
	if rf, ok := ret.Get(0).(func(authorization.AuthorizationSession) (authorization.AuthorizationSession, error)); ok {
		return rf(auhtorizationSession)
	}
	if rf, ok := ret.Get(0).(func(authorization.AuthorizationSession) authorization.AuthorizationSession); ok {
		r0 = rf(auhtorizationSession)
	} else {
		r0 = ret.Get(0).(authorization.AuthorizationSession)
	}

	if rf, ok := ret.Get(1).(func(authorization.AuthorizationSession) error); ok {
		r1 = rf(auhtorizationSession)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthorizationSessionRepository_CreateAuthorizationSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAuthorizationSession'
type MockAuthorizationSessionRepository_CreateAuthorizationSession_Call struct {
	*mock.Call
}

// CreateAuthorizationSession is a helper method to define mock.On call
//   - auhtorizationSession authorization.AuthorizationSession
func (_e *MockAuthorizationSessionRepository_Expecter) CreateAuthorizationSession(auhtorizationSession interface{}) *MockAuthorizationSessionRepository_CreateAuthorizationSession_Call {
	return &MockAuthorizationSessionRepository_CreateAuthorizationSession_Call{Call: _e.mock.On("CreateAuthorizationSession", auhtorizationSession)}
}

func (_c *MockAuthorizationSessionRepository_CreateAuthorizationSession_Call) Run(run func(auhtorizationSession authorization.AuthorizationSession)) *MockAuthorizationSessionRepository_CreateAuthorizationSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(authorization.AuthorizationSession))
	})
	return _c
}

func (_c *MockAuthorizationSessionRepository_CreateAuthorizationSession_Call) Return(_a0 authorization.AuthorizationSession, _a1 error) *MockAuthorizationSessionRepository_CreateAuthorizationSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthorizationSessionRepository_CreateAuthorizationSession_Call) RunAndReturn(run func(authorization.AuthorizationSession) (authorization.AuthorizationSession, error)) *MockAuthorizationSessionRepository_CreateAuthorizationSession_Call {
	_c.Call.Return(run)
	return _c
}

// FindAuthorizationSessionByCode provides a mock function with given fields: code
func (_m *MockAuthorizationSessionRepository) FindAuthorizationSessionByCode(code string) (authorization.AuthorizationSession, error) {
	ret := _m.Called(code)

	var r0 authorization.AuthorizationSession
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (authorization.AuthorizationSession, error)); ok {
		return rf(code)
	}
	if rf, ok := ret.Get(0).(func(string) authorization.AuthorizationSession); ok {
		r0 = rf(code)
	} else {
		r0 = ret.Get(0).(authorization.AuthorizationSession)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthorizationSessionRepository_FindAuthorizationSessionByCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAuthorizationSessionByCode'
type MockAuthorizationSessionRepository_FindAuthorizationSessionByCode_Call struct {
	*mock.Call
}

// FindAuthorizationSessionByCode is a helper method to define mock.On call
//   - code string
func (_e *MockAuthorizationSessionRepository_Expecter) FindAuthorizationSessionByCode(code interface{}) *MockAuthorizationSessionRepository_FindAuthorizationSessionByCode_Call {
	return &MockAuthorizationSessionRepository_FindAuthorizationSessionByCode_Call{Call: _e.mock.On("FindAuthorizationSessionByCode", code)}
}

func (_c *MockAuthorizationSessionRepository_FindAuthorizationSessionByCode_Call) Run(run func(code string)) *MockAuthorizationSessionRepository_FindAuthorizationSessionByCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAuthorizationSessionRepository_FindAuthorizationSessionByCode_Call) Return(_a0 authorization.AuthorizationSession, _a1 error) *MockAuthorizationSessionRepository_FindAuthorizationSessionByCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthorizationSessionRepository_FindAuthorizationSessionByCode_Call) RunAndReturn(run func(string) (authorization.AuthorizationSession, error)) *MockAuthorizationSessionRepository_FindAuthorizationSessionByCode_Call {
	_c.Call.Return(run)
	return _c
}

// FindAuthorizationSessionByID provides a mock function with given fields: sessionID
func (_m *MockAuthorizationSessionRepository) FindAuthorizationSessionByID(sessionID string) (authorization.AuthorizationSession, error) {
	ret := _m.Called(sessionID)

	var r0 authorization.AuthorizationSession
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (authorization.AuthorizationSession, error)); ok {
		return rf(sessionID)
	}
	if rf, ok := ret.Get(0).(func(string) authorization.AuthorizationSession); ok {
		r0 = rf(sessionID)
	} else {
		r0 = ret.Get(0).(authorization.AuthorizationSession)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthorizationSessionRepository_FindAuthorizationSessionByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAuthorizationSessionByID'
type MockAuthorizationSessionRepository_FindAuthorizationSessionByID_Call struct {
	*mock.Call
}

// FindAuthorizationSessionByID is a helper method to define mock.On call
//   - sessionID string
func (_e *MockAuthorizationSessionRepository_Expecter) FindAuthorizationSessionByID(sessionID interface{}) *MockAuthorizationSessionRepository_FindAuthorizationSessionByID_Call {
	return &MockAuthorizationSessionRepository_FindAuthorizationSessionByID_Call{Call: _e.mock.On("FindAuthorizationSessionByID", sessionID)}
}

func (_c *MockAuthorizationSessionRepository_FindAuthorizationSessionByID_Call) Run(run func(sessionID string)) *MockAuthorizationSessionRepository_FindAuthorizationSessionByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAuthorizationSessionRepository_FindAuthorizationSessionByID_Call) Return(_a0 authorization.AuthorizationSession, _a1 error) *MockAuthorizationSessionRepository_FindAuthorizationSessionByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthorizationSessionRepository_FindAuthorizationSessionByID_Call) RunAndReturn(run func(string) (authorization.AuthorizationSession, error)) *MockAuthorizationSessionRepository_FindAuthorizationSessionByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAuthorizationCodeByID provides a mock function with given fields: sessionID, code
func (_m *MockAuthorizationSessionRepository) UpdateAuthorizationCodeByID(sessionID string, code string) error {
	ret := _m.Called(sessionID, code)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(sessionID, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthorizationSessionRepository_UpdateAuthorizationCodeByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAuthorizationCodeByID'
type MockAuthorizationSessionRepository_UpdateAuthorizationCodeByID_Call struct {
	*mock.Call
}

// UpdateAuthorizationCodeByID is a helper method to define mock.On call
//   - sessionID string
//   - code string
func (_e *MockAuthorizationSessionRepository_Expecter) UpdateAuthorizationCodeByID(sessionID interface{}, code interface{}) *MockAuthorizationSessionRepository_UpdateAuthorizationCodeByID_Call {
	return &MockAuthorizationSessionRepository_UpdateAuthorizationCodeByID_Call{Call: _e.mock.On("UpdateAuthorizationCodeByID", sessionID, code)}
}

func (_c *MockAuthorizationSessionRepository_UpdateAuthorizationCodeByID_Call) Run(run func(sessionID string, code string)) *MockAuthorizationSessionRepository_UpdateAuthorizationCodeByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockAuthorizationSessionRepository_UpdateAuthorizationCodeByID_Call) Return(_a0 error) *MockAuthorizationSessionRepository_UpdateAuthorizationCodeByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthorizationSessionRepository_UpdateAuthorizationCodeByID_Call) RunAndReturn(run func(string, string) error) *MockAuthorizationSessionRepository_UpdateAuthorizationCodeByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthorizationSessionRepository creates a new instance of MockAuthorizationSessionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthorizationSessionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthorizationSessionRepository {
	mock := &MockAuthorizationSessionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
