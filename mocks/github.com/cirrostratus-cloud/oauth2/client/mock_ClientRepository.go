// Code generated by mockery v2.35.4. DO NOT EDIT.

package client

import (
	client "github.com/cirrostratus-cloud/oauth2/client"
	mock "github.com/stretchr/testify/mock"
)

// MockClientRepository is an autogenerated mock type for the ClientRepository type
type MockClientRepository struct {
	mock.Mock
}

type MockClientRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientRepository) EXPECT() *MockClientRepository_Expecter {
	return &MockClientRepository_Expecter{mock: &_m.Mock}
}

// CreateClient provides a mock function with given fields: _a0
func (_m *MockClientRepository) CreateClient(_a0 client.Client) (client.Client, error) {
	ret := _m.Called(_a0)

	var r0 client.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(client.Client) (client.Client, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(client.Client) client.Client); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(client.Client)
	}

	if rf, ok := ret.Get(1).(func(client.Client) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientRepository_CreateClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateClient'
type MockClientRepository_CreateClient_Call struct {
	*mock.Call
}

// CreateClient is a helper method to define mock.On call
//   - _a0 client.Client
func (_e *MockClientRepository_Expecter) CreateClient(_a0 interface{}) *MockClientRepository_CreateClient_Call {
	return &MockClientRepository_CreateClient_Call{Call: _e.mock.On("CreateClient", _a0)}
}

func (_c *MockClientRepository_CreateClient_Call) Run(run func(_a0 client.Client)) *MockClientRepository_CreateClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(client.Client))
	})
	return _c
}

func (_c *MockClientRepository_CreateClient_Call) Return(_a0 client.Client, _a1 error) *MockClientRepository_CreateClient_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientRepository_CreateClient_Call) RunAndReturn(run func(client.Client) (client.Client, error)) *MockClientRepository_CreateClient_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteClientByID provides a mock function with given fields: clientID
func (_m *MockClientRepository) DeleteClientByID(clientID string) error {
	ret := _m.Called(clientID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(clientID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientRepository_DeleteClientByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteClientByID'
type MockClientRepository_DeleteClientByID_Call struct {
	*mock.Call
}

// DeleteClientByID is a helper method to define mock.On call
//   - clientID string
func (_e *MockClientRepository_Expecter) DeleteClientByID(clientID interface{}) *MockClientRepository_DeleteClientByID_Call {
	return &MockClientRepository_DeleteClientByID_Call{Call: _e.mock.On("DeleteClientByID", clientID)}
}

func (_c *MockClientRepository_DeleteClientByID_Call) Run(run func(clientID string)) *MockClientRepository_DeleteClientByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClientRepository_DeleteClientByID_Call) Return(_a0 error) *MockClientRepository_DeleteClientByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientRepository_DeleteClientByID_Call) RunAndReturn(run func(string) error) *MockClientRepository_DeleteClientByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindClientByHashedSecret provides a mock function with given fields: clientSecret
func (_m *MockClientRepository) FindClientByHashedSecret(clientSecret string) (client.Client, error) {
	ret := _m.Called(clientSecret)

	var r0 client.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (client.Client, error)); ok {
		return rf(clientSecret)
	}
	if rf, ok := ret.Get(0).(func(string) client.Client); ok {
		r0 = rf(clientSecret)
	} else {
		r0 = ret.Get(0).(client.Client)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(clientSecret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientRepository_FindClientByHashedSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindClientByHashedSecret'
type MockClientRepository_FindClientByHashedSecret_Call struct {
	*mock.Call
}

// FindClientByHashedSecret is a helper method to define mock.On call
//   - clientSecret string
func (_e *MockClientRepository_Expecter) FindClientByHashedSecret(clientSecret interface{}) *MockClientRepository_FindClientByHashedSecret_Call {
	return &MockClientRepository_FindClientByHashedSecret_Call{Call: _e.mock.On("FindClientByHashedSecret", clientSecret)}
}

func (_c *MockClientRepository_FindClientByHashedSecret_Call) Run(run func(clientSecret string)) *MockClientRepository_FindClientByHashedSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClientRepository_FindClientByHashedSecret_Call) Return(_a0 client.Client, _a1 error) *MockClientRepository_FindClientByHashedSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientRepository_FindClientByHashedSecret_Call) RunAndReturn(run func(string) (client.Client, error)) *MockClientRepository_FindClientByHashedSecret_Call {
	_c.Call.Return(run)
	return _c
}

// FindClientByID provides a mock function with given fields: clientID
func (_m *MockClientRepository) FindClientByID(clientID string) (client.Client, error) {
	ret := _m.Called(clientID)

	var r0 client.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (client.Client, error)); ok {
		return rf(clientID)
	}
	if rf, ok := ret.Get(0).(func(string) client.Client); ok {
		r0 = rf(clientID)
	} else {
		r0 = ret.Get(0).(client.Client)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(clientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientRepository_FindClientByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindClientByID'
type MockClientRepository_FindClientByID_Call struct {
	*mock.Call
}

// FindClientByID is a helper method to define mock.On call
//   - clientID string
func (_e *MockClientRepository_Expecter) FindClientByID(clientID interface{}) *MockClientRepository_FindClientByID_Call {
	return &MockClientRepository_FindClientByID_Call{Call: _e.mock.On("FindClientByID", clientID)}
}

func (_c *MockClientRepository_FindClientByID_Call) Run(run func(clientID string)) *MockClientRepository_FindClientByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClientRepository_FindClientByID_Call) Return(_a0 client.Client, _a1 error) *MockClientRepository_FindClientByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientRepository_FindClientByID_Call) RunAndReturn(run func(string) (client.Client, error)) *MockClientRepository_FindClientByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateClient provides a mock function with given fields: _a0
func (_m *MockClientRepository) UpdateClient(_a0 client.Client) (client.Client, error) {
	ret := _m.Called(_a0)

	var r0 client.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(client.Client) (client.Client, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(client.Client) client.Client); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(client.Client)
	}

	if rf, ok := ret.Get(1).(func(client.Client) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientRepository_UpdateClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateClient'
type MockClientRepository_UpdateClient_Call struct {
	*mock.Call
}

// UpdateClient is a helper method to define mock.On call
//   - _a0 client.Client
func (_e *MockClientRepository_Expecter) UpdateClient(_a0 interface{}) *MockClientRepository_UpdateClient_Call {
	return &MockClientRepository_UpdateClient_Call{Call: _e.mock.On("UpdateClient", _a0)}
}

func (_c *MockClientRepository_UpdateClient_Call) Run(run func(_a0 client.Client)) *MockClientRepository_UpdateClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(client.Client))
	})
	return _c
}

func (_c *MockClientRepository_UpdateClient_Call) Return(_a0 client.Client, _a1 error) *MockClientRepository_UpdateClient_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientRepository_UpdateClient_Call) RunAndReturn(run func(client.Client) (client.Client, error)) *MockClientRepository_UpdateClient_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientRepository creates a new instance of MockClientRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientRepository {
	mock := &MockClientRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
