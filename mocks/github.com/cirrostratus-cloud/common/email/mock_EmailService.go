// Code generated by mockery v2.35.4. DO NOT EDIT.

package email

import mock "github.com/stretchr/testify/mock"

// MockEmailService is an autogenerated mock type for the EmailService type
type MockEmailService struct {
	mock.Mock
}

type MockEmailService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEmailService) EXPECT() *MockEmailService_Expecter {
	return &MockEmailService_Expecter{mock: &_m.Mock}
}

// SendEmail provides a mock function with given fields: from, to, subject, body
func (_m *MockEmailService) SendEmail(from string, to string, subject string, body string) error {
	ret := _m.Called(from, to, subject, body)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) error); ok {
		r0 = rf(from, to, subject, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEmailService_SendEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendEmail'
type MockEmailService_SendEmail_Call struct {
	*mock.Call
}

// SendEmail is a helper method to define mock.On call
//   - from string
//   - to string
//   - subject string
//   - body string
func (_e *MockEmailService_Expecter) SendEmail(from interface{}, to interface{}, subject interface{}, body interface{}) *MockEmailService_SendEmail_Call {
	return &MockEmailService_SendEmail_Call{Call: _e.mock.On("SendEmail", from, to, subject, body)}
}

func (_c *MockEmailService_SendEmail_Call) Run(run func(from string, to string, subject string, body string)) *MockEmailService_SendEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockEmailService_SendEmail_Call) Return(_a0 error) *MockEmailService_SendEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEmailService_SendEmail_Call) RunAndReturn(run func(string, string, string, string) error) *MockEmailService_SendEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEmailService creates a new instance of MockEmailService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEmailService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEmailService {
	mock := &MockEmailService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
