// Code generated by mockery v2.35.4. DO NOT EDIT.

package event

import (
	event "github.com/cirrostratus-cloud/common/event"
	mock "github.com/stretchr/testify/mock"
)

// MockEventBus is an autogenerated mock type for the EventBus type
type MockEventBus struct {
	mock.Mock
}

type MockEventBus_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventBus) EXPECT() *MockEventBus_Expecter {
	return &MockEventBus_Expecter{mock: &_m.Mock}
}

// Publish provides a mock function with given fields: eventName, _a1
func (_m *MockEventBus) Publish(eventName event.EventName, _a1 event.Event) error {
	ret := _m.Called(eventName, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(event.EventName, event.Event) error); ok {
		r0 = rf(eventName, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventBus_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockEventBus_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - eventName event.EventName
//   - _a1 event.Event
func (_e *MockEventBus_Expecter) Publish(eventName interface{}, _a1 interface{}) *MockEventBus_Publish_Call {
	return &MockEventBus_Publish_Call{Call: _e.mock.On("Publish", eventName, _a1)}
}

func (_c *MockEventBus_Publish_Call) Run(run func(eventName event.EventName, _a1 event.Event)) *MockEventBus_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(event.EventName), args[1].(event.Event))
	})
	return _c
}

func (_c *MockEventBus_Publish_Call) Return(_a0 error) *MockEventBus_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventBus_Publish_Call) RunAndReturn(run func(event.EventName, event.Event) error) *MockEventBus_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function with given fields: eventName, subscriber
func (_m *MockEventBus) Subscribe(eventName event.EventName, subscriber func(event.Event) error) error {
	ret := _m.Called(eventName, subscriber)

	var r0 error
	if rf, ok := ret.Get(0).(func(event.EventName, func(event.Event) error) error); ok {
		r0 = rf(eventName, subscriber)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventBus_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockEventBus_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - eventName event.EventName
//   - subscriber func(event.Event) error
func (_e *MockEventBus_Expecter) Subscribe(eventName interface{}, subscriber interface{}) *MockEventBus_Subscribe_Call {
	return &MockEventBus_Subscribe_Call{Call: _e.mock.On("Subscribe", eventName, subscriber)}
}

func (_c *MockEventBus_Subscribe_Call) Run(run func(eventName event.EventName, subscriber func(event.Event) error)) *MockEventBus_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(event.EventName), args[1].(func(event.Event) error))
	})
	return _c
}

func (_c *MockEventBus_Subscribe_Call) Return(_a0 error) *MockEventBus_Subscribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventBus_Subscribe_Call) RunAndReturn(run func(event.EventName, func(event.Event) error) error) *MockEventBus_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEventBus creates a new instance of MockEventBus. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventBus(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventBus {
	mock := &MockEventBus{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
